function HandlebarsHelpers ( ) {

  function json ( context, options ) {
    return options.fn ( JSON.parse ( context ) );
  }

  function speakingurl ( context, options ) {
	var getSlug = require('speakingurl');
    return getSlug ( this.label ) ;
  }  

  return { 
    json : json,
    speakingurl : speakingurl
  } ;

}

function dynamic ( configuration ) {
	
  var path = require ('path');

  var root = path.normalize ( path.dirname ( module.parent.filename ) + '/../../..') ;
	  
  try {

    var Handlebars = require('handlebars') ;
  
    var _ = require('underscore') ;
  
    var fs = require('fs') ; 

    var grunt = require('grunt') ;

    var Gruntconfigurations = require( root + '/Gruntconfigurations' ) ;
  
    var sassConfiguration = Gruntconfigurations.sass() ;
  
    var jsConfiguration = Gruntconfigurations.js() ;
  
    var pkg = grunt.file.readJSON ( root + '/package.json') ;

    var source = grunt.file.readJSON ( root + '/source/json/conf.json');
    
    var widgets = grunt.file.readJSON ( root + '/source/json/widgets.json') ;

    var uncompileTemplate = grunt.file.read ( configuration.template ) ;

    var matchWidgetsRegEx = "data-script='(.*)'" ;

    var matchWidgets = uncompileTemplate.match ( matchWidgetsRegEx ) ;

    var handlebars_template = Handlebars.compile ( uncompileTemplate ) ;

    var partials = {};

    var toJSON = '';

    var javascriptString = '';

    var handlebarsTemplate = '';

    var pages = {};
    
    /** copy all of the page properties in the source */
    _.extend ( source, configuration.data ) ;
    
    /** register Handlebars helpers */
    _.each ( HandlebarsHelpers() , function ( helper , key ) { Handlebars.registerHelper ( key , helper ) } ) ;
    
    /** string that holds JavaScript and handlebars templates */
    source.closure = '';    

    if ( grunt.file.isDir ( root + '/source/json/pages' ) ) {
      var sources = fs.readdirSync ( root + '/source/json/pages' ) ;
      for ( var i = 0; i < sources.length ; i++ ) {
        if ( sources[i].match('.json') ) {
          _.extend ( pages, grunt.file.readJSON ( root + '/source/json/pages/' + sources[i] ) ) ;
        }
      }
    }
    
    if ( matchWidgets && matchWidgets[0] ) {
      toJSON = matchWidgets[0] ;
      toJSON = toJSON.replace(/'/g, '').replace(/data-script=/g, '') ;
      toJSON = JSON.parse( toJSON ) ;

      _.each ( toJSON.js, function ( js ) {
    	if ( jsConfiguration.js.style == 'compressed' ) {
    	  var js_filename = path.basename ( js , path.extname( js ) ) + '.min' + path.extname ( js ) ;
          if ( grunt.file.isFile ( root + '/build/js/' + js_filename ) ) {
        	source.closure += '<script>' + grunt.file.read( root + '/build/js/' + js_filename ) + '</script>' ;
          }
        }
    	else {
          if ( grunt.file.isFile( root + '/build/js/' + js ) ) {
            source.closure += '<script src="' + source.appUrl + '/js/' + js + '"></script>';
          }
    	}
      } ) ;

      _.each(toJSON.hbs, function ( hbs ) {
        if ( grunt.file.isFile(root + '/source/views/' + hbs.template) ) {
          source.closure += '<script id="' + hbs.id + '" type="text/x-handlebars-template">' + grunt.file.read(root + '/source/views/' + hbs.template) + '</script>' ;
        }
      });
    }

    source.menus = [] ;

    /** build the menu object */
    _.each ( pages , function ( page, index ) {
      if (_.isArray(pages[index].menu)) {
        _.each( pages[index].menu, function ( menu ) {
          source.menus[menu.weight] = {
            label: menu.label,
            status: 'active',
            route: pages[index].route.replace('/index.html', ''),
            page: index,
            weight: menu.weight
          };
        });
      }
    } ) ;
    
    /** clean the menu object of empty values that can "exist" becuase of weight */
    source.menus = _.reject ( source.menus, function ( menu ) { return _.isUndefined ( menu ) ; } ) ;    

    /** 
     * this spaghetti maps the widgets to the task and 
     * load data Object if type is not local 
     */
    if ( source.content ) {
      _.each( source.content, function ( content, a ) {
        _.each( source.content[a], function ( pane, b ) {
          if ( _.isArray( source.content[a][b].widgets ) ) {
            source.content[a][b].raw = [];
            _.each( source.content[a][b].widgets, function ( widget, c ) {
              var spaghetti = {};
              if ( widgets[source.content[a][b].widgets[c]].sourceType === 'json' ) {
                var json_data = grunt.file.readJSON( root + '/' + widgets[source.content[a][b].widgets[c]].source ) ;
                spaghetti =  {
                  label : widget, 
                  widget : widgets[source.content[a][b].widgets[c]] , 
                  data : json_data                          
                } ;
              }
              // if you care about placement in specific scenario
              source.content[a][b][widget] = spaghetti;
              // as array to loop by weight
              source.content[a][b].raw.push( spaghetti );
            });
          }
        });
      });
    }
            
    if ( sassConfiguration.build === 'external' ) {
      source.css = "<link href='" + source.appUrl + "/css/style.css' rel='stylesheet' type='text/css'>";
    }
    else {
      source.css = "<style>" + grunt.file.read(root + '/build/css/style.css') + "</style>";
    }

    grunt.file.recurse(root + '/source/views/', function callback (abspath, rootdir, subdir, filename) {
      if ( filename.match(".mustache") && configuration.template !== filename ) {
        var name = filename.replace(".mustache", "");
        var partial = grunt.file.read(abspath);
        var matchWidgetsRegEx = "data-script='(.*)'";
        var matchWidgets = partial.match( matchWidgetsRegEx );
        var toJSON = '';
        var javascriptString = '';
        var javascriptTagOpen = '<script>';
        var javascriptTagClose = '</script>';
        var closure = '';
        
        if ( !_.find( _.keys ( pages ), name ) ) {
          if (matchWidgets && matchWidgets[0]) {
            toJSON = matchWidgets[0];
            toJSON = toJSON.replace(/'/g, '').replace(/data-script=/g, '');
            toJSON = JSON.parse(toJSON);
            _.each ( toJSON.js, function ( js ) {
              if ( jsConfiguration.js.style == 'compressed' ) {
            	var js_filename = path.basename ( js , path.extname( js ) ) + '.min' + path.extname ( js ) ;
                if ( grunt.file.isFile ( root + '/build/js/' + js_filename ) ) {
                  javascriptString += javascriptTagOpen + grunt.file.read( root + '/build/js/' + js_filename ) + javascriptTagClose ;
                }
              }
              else {
                if ( grunt.file.isFile( root + '/build/js/' + js ) ) {
                  javascriptString += '<script src="' + source.appUrl + '/js/' + js + '"></script>';
                }
              }
            } ) ;
          }
          partials[name] = partial + javascriptString;
        }
      }
    } ) ;

    grunt.file.recurse(root + '/source/views/', function callback(abspath, rootdir, subdir, filename) {
      if ( filename.match('.hbs') ) {
        grunt.file.write(root + '/build/js/' + filename, grunt.file.read(abspath));
      }
    });

    _.each( partials, function ( partial, key, list ) { Handlebars.registerPartial( key, partial ) ; } ) ;
            
    var traceName = configuration.route.replace('/index.html', '').replace(/\//g, '-').replace(/-/, '') ;
            
    grunt.file.write( root + '/source/json/datasources/' + traceName + '.json', JSON.stringify( source ) );

    /** write HTML file */
    grunt.file.write( root + '/build' + configuration.route, handlebars_template ( source ) );
            
    grunt.log.write('Transforming ' + configuration.route + ' template into HTML').ok();

  }
  
  catch ( err ) {
    grunt.log.write('Transforming ' + configuration.task + ' into HTML. See ' + err.description).error() ;
    console.log ( err ) ;
  }

}

function html ( buildPath, task ) {

  var path = require ('path');

  var root = path.normalize ( path.dirname ( module.parent.filename ) + '/../../..') ;
  
  try {

    var Handlebars = require ('handlebars');

    var _ = require ('underscore');

    var fs = require ('fs') ;   

    var grunt = require('grunt');

    var Gruntconfigurations = require ( root + '/Gruntconfigurations') ;

    var sassConfiguration = Gruntconfigurations.sass() ;  

    var jsConfiguration = Gruntconfigurations.js() ;  

    var pkg = grunt.file.readJSON ( root + '/package.json');

    var source = grunt.file.readJSON ( root + '/source/json/conf.json');

    var widgets = grunt.file.readJSON ( root + '/source/json/widgets.json');

    var uncompileTemplate = grunt.file.read ( root + '/source/views/' + task + '.mustache');

    var matchWidgetsRegEx = "data-script='(.*)'";

    var matchWidgets = uncompileTemplate.match ( matchWidgetsRegEx );

    var partials = {};

    var toJSON = '';

    var javascriptString = '';

    var handlebarsTemplate = '';

    var template = Handlebars.compile ( uncompileTemplate );

    var pages = {};

    var sources = fs.readdirSync ( root + '/source/json/pages' ) ;

    for ( var i = 0; i < sources.length ; i++ ) {
      if ( sources[i].match('.json') ) {
        _.extend ( pages, grunt.file.readJSON ( root + '/source/json/pages/' + sources[i] ) ) ;
      }
    }

    /** copy all of the page properties in the source */
    _.extend ( source, pages[task] ) ;

    /** register Handlebars helpers */
    _.each( HandlebarsHelpers() , function ( helper , key ) {
      Handlebars.registerHelper ( key , helper )
    } ) ;

    /** string that holds JavaScript and handlebars templates */
    source.closure = '';
    
    /** find JavaScript and append to closure */
    if ( matchWidgets && matchWidgets[0] ) {
      toJSON = matchWidgets[0];
      toJSON = toJSON.replace(/'/g, '').replace(/data-script=/g, '');
      toJSON = JSON.parse( toJSON );
      
      _.each ( toJSON.js, function ( js ) {
        if ( grunt.file.isFile('build/js/' + js) ) {
          source.closure += '<script>' + grunt.file.read('build/js/' + js) + '</script>';
        }
      } ) ;
      
      /** find handlebars templates and append to closure */
      _.each ( toJSON.hbs, function ( hbs ) {
        if ( grunt.file.isFile('source/views/' + hbs.template ) ) {
          source.closure += '<script id="' + hbs.id + '" type="text/x-handlebars-template">' + grunt.file.read('source/views/' + hbs.template) + '</script>';
        }
      } ) ;
    }
    
    source.menus = [] ;
    
    /** build the menu object */
    _.each ( pages, function ( page, index ) {
      if ( _.isArray ( pages[index].menu ) ) {
        _.each( pages[index].menu, function ( menu ) {
          source.menus[menu.weight] = {
            label: menu.label,
            status: 'active',
            route: pages[index].route.replace('/index.html', ''),
            page: index,
            weight: menu.weight
          } ;
        } ) ;
      }
    } ) ;

    /** clean the menu object of empty values that can "exist" becuase of weight */
    source.menus = _.reject ( source.menus, function ( menu ) { return _.isUndefined ( menu ) ; } ) ;

    /** 
     * this spaghetti maps the widgets to the task and
     * load data Object if type is not local
     */
    if ( source.content ) {
      _.each( source.content, function ( content, a ) {
        _.each( source.content[a], function ( pane, b ) {
          if ( _.isArray( source.content[a][b].widgets ) ) {
            source.content[a][b].raw = [];
            _.each( source.content[a][b].widgets, function ( widget, c ) {
              var spaghetti = {};
              if ( widgets[source.content[a][b].widgets[c]].sourceType === 'json' ) {
                var json_data = grunt.file.readJSON( root + '/' + widgets[source.content[a][b].widgets[c]].source ) ;
                spaghetti =  { 
                  label : widget, 
                  widget : widgets[source.content[a][b].widgets[c]] , 
                  data : json_data
                } ;   
              }
              // if you care about placement in specific scenario
              source.content[a][b][widget] = spaghetti;
              // as array to loop by weight
              source.content[a][b].raw.push( spaghetti );
            });
          }
        });
      });
    }
    
    if ( sassConfiguration.build == 'external' ) {
      source.css = "<link href='" + source.appUrl + "/css/style.css' rel='stylesheet' type='text/css'>";
    }

    else {
      source.css = "<style>" + grunt.file.read ( root + '/build/css/style.css' ) + "</style>";
    }

    grunt.file.recurse ( root + '/source/views/', function callback ( abspath, rootdir, subdir, filename ) {
      if ( filename.match(".mustache") && task + '.mustache' !== filename ) {
        var name = filename.replace(".mustache", ""),
            partial = grunt.file.read(abspath),
            matchWidgetsRegEx = "data-script='(.*)'",
            matchWidgets = partial.match(matchWidgetsRegEx),
            toJSON = '',
            javascriptString = '',
            closure = '';
        
        if ( !_.find( _.keys( pages ), name ) ) {
          if ( matchWidgets && matchWidgets[0] ) {
            toJSON = matchWidgets[0];
            toJSON = toJSON.replace(/'/g, '').replace(/data-script=/g, '');
            toJSON = JSON.parse( toJSON );
            _.each(toJSON.js, function ( js ) {
              if ( grunt.file.isFile('build/js/' + js) ) {
                javascriptString += '<script>' + grunt.file.read('build/js/' + js) + '</script>';
              }
            });
          }
          partials[name] = partial + javascriptString;
        }
      }
    });

    grunt.file.recurse ( root + '/source/views/', function callback(abspath, rootdir, subdir, filename ) {
      if ( filename.match(".hbs") ) {
        grunt.file.write('build/js/' + filename, grunt.file.read ( abspath ) ) ;
      }
    });

    /** register partials */
    _.each ( partials, function ( partial, key, list ) { Handlebars.registerPartial (key, partial) ; } );

    /** write the HTML files */
    grunt.file.write( buildPath, template ( source ) ) ;
    
    grunt.log.write('Transforming ' + task + ' template into HTML').ok();

  }

  catch ( err ) {
    console.log ( err ) ;
    grunt.log.write('Transforming ' + task + ' into HTML. See ' + err.description).error() ;
  }

}

exports.dynamic = dynamic;

exports.html = html;
