function dynamic ( configuration ) {
	
  var Handlebars = require('handlebars');
  
  var _ = require('underscore');
  
  var grunt = require('grunt');
  
  var path = require('path');
  
  /** @TODO: find if there is a more elegant solution to this */
  var root = path.normalize( path.dirname(module.parent.filename) + '/../../..');
  
  var pkg = grunt.file.readJSON( root + '/package.json');

  var conf = grunt.file.readJSON( root + '/source/json/conf.json');
  
  try {

    var conf = grunt.file.readJSON(root + '/source/json/conf.json'),
        pages = grunt.file.readJSON(root + '/source/json/pages.json'),
        widgets = grunt.file.readJSON(root + '/source/json/widgets.json'),
        uncompileTemplate = grunt.file.read( configuration.template ),
        source = configuration.data,
        matchWidgetsRegEx = "data-script='(.*)'",
        matchWidgets = uncompileTemplate.match(matchWidgetsRegEx),
        javascriptTagOpen = '<script>',
        javascriptTagClose = '</script>',
        environment = conf.environment,
        handlebars_template = Handlebars.compile(uncompileTemplate),
        partials = {},
        menus = [],
        navbar = [],
        toJSON = '',
        javascriptString = '',
        handlebarsTemplate = '',
        links = '',
        closure = '';
    
        if ( matchWidgets && matchWidgets[0] ) {
          
          toJSON = matchWidgets[0];
          
          toJSON = toJSON.replace(/'/g, '').replace(/data-script=/g, '');
          
          toJSON = JSON.parse(toJSON);

          _.each(toJSON.js, function ( js ) {
            if ( grunt.file.isFile(root + '/build/js/' + js) ) {
              javascriptString += javascriptTagOpen + grunt.file.read(root + '/build/js/' + js) + javascriptTagClose;
              }
            });

            _.each(toJSON.hbs, function (hbs) {
              
              var handlebarsTagOpen = '<script id="' + hbs.id + '" type="text/x-handlebars-template">' ;
              
              var handlebarsTagClose = '</script>';

              if ( grunt.file.isFile(root + '/source/views/' + hbs.template) ) {
                handlebarsTemplate += handlebarsTagOpen + grunt.file.read(root + '/source/views/' + hbs.template) + handlebarsTagClose;
              }

            });
        }

        closure += handlebarsTemplate + javascriptString;
        
        source.closure = closure;
            
        // build the menu object
        _.each ( pages, function ( page, index ) {
                if (_.isArray(pages[index].menu)) {
                    _.each(pages[index].menu, function(menu) {
                        menus[menu.weight] = {
                            label: menu.label,
                            status: 'active',
                            route: pages[index].route.replace('/index.html', ''),
                            page: index,
                            weight: menu.weight
                        };
                    });
                }
            });

            // this spaghetti maps the widgets to the task and 
            // load data Object if type is not local
            if ( source.content ) {
              _.each( source.content, function ( content, a ) {
                _.each( source.content[a], function ( pane, b ) {
                  if ( _.isArray( source.content[a][b].widgets ) ) {
                    source.content[a][b].raw = [];
                    _.each( source.content[a][b].widgets, function ( widget, c ) {
                      var spaghetti = {};
                      if ( widgets[source.content[a][b].widgets[c]].sourceType === 'json' ) {
                        spaghetti =  { 
                          label : widget, 
                          widget : widgets[source.content[a][b].widgets[c]] , 
                          data : grunt.file.readJSON( root + '/' + widgets[source.content[a][b].widgets[c]].source ) 
                        } ;   
                      }
                      // if you care about placement in specific scenario
                      source.content[a][b][widget] = spaghetti;
                      // as array to loop by weight
                      source.content[a][b].raw.push( spaghetti );
                    });
                  }
                });
              });
            }
            
            source.menus = menus;
            
            source.appRoot = conf[environment].appRoot;
            
            source.discoUrl = conf[environment].discoUrl;
            
            source.discovery = conf.discovery;
            
            source.appName = conf.appName;
            
            source.appUrl = conf[environment].appUrl;
            
            source.partners = widgets.partners;

            if ( conf[environment].sass.build === 'external' ) {
              source.css = "<link href='" + source.appUrl + "/css/style.css' rel='stylesheet' type='text/css'>";
            }
            else {
              source.css = "<style>" + grunt.file.read(root + '/build/css/style.css') + "</style>";
            }

            grunt.file.recurse(root + '/source/views/', function callback (abspath, rootdir, subdir, filename) {
                if ( filename.match(".mustache") && configuration.template !== filename ) {
                    var name = filename.replace(".mustache", ""),
                        partial = grunt.file.read(abspath),
                        matchWidgetsRegEx = "data-script='(.*)'",
                        matchWidgets = partial.match(matchWidgetsRegEx),
                        toJSON = '',
                        javascriptString = '',
                        javascriptTagOpen = '<script>',
                        javascriptTagClose = '</script>',
                        closure = '';
                    if ( !_.find(_.keys(pages), name ) ) {
                        if (matchWidgets && matchWidgets[0]) {
                            toJSON = matchWidgets[0];
                            toJSON = toJSON.replace(/'/g, '').replace(/data-script=/g, '');
                            toJSON = JSON.parse(toJSON);
                            _.each(toJSON.js, function(js) {
                                if (grunt.file.isFile(root + '/build/js/' + js)) {
                                    javascriptString += javascriptTagOpen + grunt.file.read(root + '/build/js/' + js) + javascriptTagClose;
                                }
                            });
                        }
                        partials[name] = partial + javascriptString;
                    }
                }
            });

            grunt.file.recurse(root + '/source/views/', function callback(abspath, rootdir, subdir, filename) {
              if ( filename.match('.hbs') ) {
                grunt.file.write(root + '/build/js/' + filename, grunt.file.read(abspath));
              }
            });

            _.each( partials, function( partial, key, list ) { 
            	Handlebars.registerPartial( key, partial );
            } );
            
            var traceName = configuration.route.replace('/index.html', '').replace(/\//g, '-').replace(/-/, '') ;
            
            grunt.file.write(root + '/source/json/datasources/' + traceName + '.json', JSON.stringify( source ) );

            /** write HTML file */
            grunt.file.write(root + '/build' + configuration.route, handlebars_template ( source ) );
            
            grunt.log.write('Transforming ' + configuration.route + ' template into HTML ').ok();

        }
        catch (err) {
          grunt.log.write('Transforming template into HTML. See ' + err.description + ' ').error();
        }

}

function html ( buildPath, task, options ) {
	
  var Handlebars = require('handlebars');
  
  var hogan = require('hogan');
  
  var _ = require('underscore');
  
  var grunt = require('grunt');
  
  var path = require('path');
  
  /** @TODO: find if there is a more elegant solution to this */
  var root = path.normalize( path.dirname(module.parent.filename) + '/../../..');
  
  var pkg = grunt.file.readJSON(root + '/package.json');

  var conf = grunt.file.readJSON(root + '/source/json/conf.json');
	
  try {

     var pages = grunt.file.readJSON(root + '/source/json/pages.json'),
                widgets = grunt.file.readJSON(root + '/source/json/widgets.json'),
                uncompileTemplate = grunt.file.read(root + '/source/views/' + task + '.mustache'),
                source = pages[task],
                matchWidgetsRegEx = "data-script='(.*)'",
                matchWidgets = uncompileTemplate.match(matchWidgetsRegEx),
                javascriptTagOpen = '<script>',
                javascriptTagClose = '</script>',
                template = hogan.compile(uncompileTemplate),
                environment = conf.environment,
                partials = {},
                menus = [],
                navbar = [],
                toJSON = '',
                javascriptString = '',
                handlebarsTemplate = '',
                links = '',
                closure = '';

            if ( matchWidgets && matchWidgets[0] ) {
                toJSON = matchWidgets[0];
                toJSON = toJSON.replace(/'/g, '').replace(/data-script=/g, '');
                toJSON = JSON.parse(toJSON);
                _.each(toJSON.js, function(js) {
                    if ( grunt.file.isFile('build/js/' + js) ) {
                        javascriptString += javascriptTagOpen + grunt.file.read('build/js/' + js) + javascriptTagClose;
                    }
                });

                _.each(toJSON.hbs, function(hbs) {
                    var handlebarsTagOpen = '<script id="' + hbs.id + '" type="text/x-handlebars-template">',
                        handlebarsTagClose = '</script>';

                    if (grunt.file.isFile('source/views/' + hbs.template)) {
                        handlebarsTemplate += handlebarsTagOpen + grunt.file.read('source/views/' + hbs.template) + handlebarsTagClose;
                    }
                });
            }

            closure += handlebarsTemplate + javascriptString;

            source.closure = closure;
            
            // build the menu object
            _.each( pages, function(page, index) {
                if (_.isArray(pages[index].menu)) {
                    _.each(pages[index].menu, function(menu) {
                        menus[menu.weight] = {
                            label: menu.label,
                            status: 'active',
                            route: pages[index].route.replace('/index.html', ''),
                            page: index,
                            weight: menu.weight
                        };
                    });
                }
            });

            // this spaghetti maps the widgets to the task and 
            // load data Object if type is not local
            if ( source.content ) {
              _.each( source.content, function ( content, a ) {
                _.each( source.content[a], function ( pane, b ) {
                  if ( _.isArray( source.content[a][b].widgets ) ) {
                    source.content[a][b].raw = [];
                    _.each( source.content[a][b].widgets, function ( widget, c ) {
                      var spaghetti = {};
                      if ( widgets[source.content[a][b].widgets[c]].sourceType === 'json' ) {
                        spaghetti =  { 
                          label : widget, 
                          widget : widgets[source.content[a][b].widgets[c]] , 
                          data : grunt.file.readJSON( root + '/' + widgets[source.content[a][b].widgets[c]].source ) 
                        } ;   
                      }
                      // if you care about placement in specific scenario
                      source.content[a][b][widget] = spaghetti;
                      // as array to loop by weight
                      source.content[a][b].raw.push( spaghetti );
                    });
                  }
                });
              });
            }
            
            source.menus = menus;
            
            source.appRoot = conf[environment].appRoot;
            
            source.discoUrl = conf[environment].discoUrl;
            
            source.discovery = conf.discovery;
            
            source.appName = conf.appName;
            
            source.appUrl = conf[environment].appUrl;
            
            source.partners = widgets.partners;

            if ( conf[environment].sass.build === 'external' ) {
                source.css = "<link href='" + source.appUrl + "/css/style.css' rel='stylesheet' type='text/css'>";
            }
            else {
                source.css = "<style>" + grunt.file.read(root + '/build/css/style.css') + "</style>";
            }

            grunt.file.recurse(root + '/source/views/', function callback(abspath, rootdir, subdir, filename) {
                if (filename.match(".mustache") && task + '.mustache' !== filename) {
                    var name = filename.replace(".mustache", ""),
                        partial = grunt.file.read(abspath),
                        matchWidgetsRegEx = "data-script='(.*)'",
                        matchWidgets = partial.match(matchWidgetsRegEx),
                        toJSON = '',
                        javascriptString = '',
                        javascriptTagOpen = '<script>',
                        javascriptTagClose = '</script>',
                        closure = '';
                    if (!_.find(_.keys(pages), name)) {
                        if (matchWidgets && matchWidgets[0]) {
                            toJSON = matchWidgets[0];
                            toJSON = toJSON.replace(/'/g, '').replace(/data-script=/g, '');
                            toJSON = JSON.parse(toJSON);
                            _.each(toJSON.js, function(js) {
                                if (grunt.file.isFile('build/js/' + js)) {
                                    javascriptString += javascriptTagOpen + grunt.file.read('build/js/' + js) + javascriptTagClose;
                                }
                            });
                        }
                        partials[name] = partial + javascriptString;
                    }
                }
            });

            grunt.file.recurse(root + '/source/views/', function callback(abspath, rootdir, subdir, filename) {
                if (filename.match(".hbs")) {
                    grunt.file.write('build/js/' + filename, grunt.file.read(abspath));
                }
            });

            // write file
            var m = Handlebars.compile(uncompileTemplate);
            
            _.each( partials, function( partial, key, list ) { 
            	Handlebars.registerPartial(key, partial) ;  
            } );

            grunt.file.write(buildPath, m ( source ) );
            
            grunt.log.write('Transforming ' + task + ' template into HTML ').ok();

        }

        catch (err) {

            grunt.log.write('Transforming template into HTML. See ' + err.description + ' ').error();

            console.log(err);
        }


}

exports.dynamic = dynamic;

exports.html = html;
