{"bodyClass":"subjects","content":{"items":{"sources":["discovery"],"rows":12,"fl":["zs_image_medium","ss_identifer","ss_title","sm_author","sm_publisher","ss_spublisher","ss_pubdate","sm_partner","sm_subject","ss_publocation","sm_field_publication_location","is_ispartof_series","ss_series_label","is_ispartof_multivol","ss_multivol_label"],"fq":[{"filter":"sm_collection_identifier","value":"d72398c3-1cd7-4734-ab1c-3e3b29862cee"}]}},"sources":[{"src":"http://dev-discovery.dlib.nyu.edu:8080/solr3_discovery/core0/select/","source":"discovery"}],"tid":"41","label":"Akkadian","closure":"<script id=\"items\" type=\"text/x-handlebars-template\"><!-- file: items.hbs -->\n<div class=\"item-list flex-container\">\n  {{#items}}\n  <article class=\"item\" {{#if score}}data-score=\"{{{score}}}\"{{/if}}>\n  <div class=\"card\">\n    <div class=\"thumbs\" >\n      <div class=\"clipper\">\n      <a href=\"{{../app.appRoot}}/book/{{ss_identifer}}\"><img src=\"{{zs_image_220wide}}\" alt=\"\" title=\"{{title}}\"/></a></div>\n    </div>\n    <h1 class=\"md_title\"><a href=\"{{../app.appRoot}}/book/{{ss_identifer}}\">{{{ss_title}}}</a></h1>\n    <div class=\"md_author\">{{#each sm_author}}<span>{{this}}</span>{{/each}}</div>\n    {{#if is_ispartof_series}}\n      <div class=\"md_series\"><span class=\"md_label\">Series</span> <span>{{ss_series_label}}</span></div>\n    {{/if}}\n    {{#if is_ispartof_multivol}}\n      <div class=\"md_multivol\"><span class=\"md_label\">Part of</span> <span>{{ss_multivol_label}}</span></div>\n    {{/if}}\n    <div  class=\"md_publisher\"><span class=\"md_label\">Publisher:</span> {{#each sm_publisher}}<span>{{this}}</span>{{/each}}, {{#each sm_field_publication_location}}<span>{{this}}</span>{{/each}}, {{ss_pubdate}}</div>\n    <div class=\"md_provider\"><span class=\"md_label\">Provider:</span> {{#each sm_partner}}<span>{{this}}</span>{{/each}}</div>\n    <div class=\"md_subjects\"><span class=\"md_label\">Subjects:</span> {{#each sm_subject}}<a class=\"md_subject\" href=\"{{../../app.appRoot}}/search?q={{this}}\">{{this}}</a>{{/each}}</div>\n  </div>\n  </article>\n  {{/items}}\n  <article class=\"item\"></article>\n  <article class=\"item\"></article>\n</div>\n</script><script>/* jshint laxcomma: true */\nYUI().use(\n    'node'\n  , 'event'\n  , 'handlebars'\n  , 'jsonp'\n  , 'router'\n  , 'gallery-paginator'\n  , 'anim'\n  , function (Y) {\n  \n    'use strict';\n    \n    var itemsTemplateSource = Y.one('#items').getHTML();\n    \n    var itemsTemplate = Y.Handlebars.compile(itemsTemplateSource);\n    \n    var router = new Y.Router();\n  \n    function getRoute () {\n\n      var pageQueryString = getParameterByName('page')\n        , sortQueryString = getParameterByName('sort')\n        , page = ( pageQueryString ) ? pageQueryString : 1\n        , route = router.getPath() + '?page=' + page;\n\n      if ( sortQueryString ) {\n          route = route + '&sort=' + sortQueryString;\n      }\n      \n      return route;\n\n    }\n\n    function getRouteChangedParameters () {\n\n      // when filter or sort is changed, we should go back to the first page\n      var sortQueryString = getParameterByName('sort')\n        , route = router.getPath();\n\n      if ( sortQueryString ) {\n          route = route + '&sort=' + sortQueryString;\n      }\n  \n      return route;\n\n    }\n    \n    function getParameterByName(name) {\n      \n      name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n      \n      var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\")\n        , results = regex.exec(location.search);\n\n      return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n    }\n\n    router.route( router.getPath(), function ( req ) {\n\n      var node = Y.one('[data-name=\"items\"]')\n        , data = node.getData()\n        , rows = ( req.query.rows ) ? req.query.rows : ( ( data.rows ) ? data.rows : 10 ) \n        , sort = ( req.query.sort ) ? req.query.sort : ( ( data.sort ) ? data.sort : Y.one('#browse-select').get('value') )           \n        , page = ( req.query.page ) ? parseInt( req.query.page, 10 ) : 0\n        , start =  0;\n\n        if ( page <= 1 ) {\n          start = 0;\n        }\n        else {\n          start = ( page * rows ) - rows;\n        }\n      \n      initRequest ( {\n        container : node\n        , start : start\n        , page : page\n        , rows : rows\n        , sort : sort\n      } );\n      \n    });\n  \n  function onSelectChange( ) {\n    \n    \n    Y.all('#browse-select option').each(function(node) { \n      /* reset all option text */ \n      var t = node.get(\"text\");\n      t = t.replace(\"Sorting by\", \"Sort by\");\n      node.set(\"text\", t);\n    });\n    var t2 = Y.one(\"#browse-select option:checked\").get(\"text\");\n    t2 = t2.replace(\"Sort by\", \"Sorting by\");\n    Y.one(\"#browse-select option:checked\").set(\"text\", t2);\n    \n    router.replace( getRouteChangedParameters() );\n   \n  }\n  \n  function onFailure( response, args ) {\n    \n      // mover a onFailure\n      var data = args.container.getData()\n        , requestError = data.requesterror;\n        \n      if ( !requestError ) {\n          args.container.setAttribute( 'data-requesterror', 1 );\n          requestError = 1;\n      }\n      else { \n          requestError = parseInt(requestError, 10) + 1;\n          args.container.setAttribute( 'data-requesterror', requestError );                \n      }\n    \n      /** there try 3 more times before giving up */\n      if ( requestError < 3 ) {\n          router.replace( getRoute () );\n      }\n      else {\n        Y.log('onFailure: there was a problem with this request');\n      }\n  }\n\n  function onTimeout() {\n      onFailure();\n  }\n  \n  function update ( state ) {\n\n    this.setPage( state.page, true );\n    this.setRowsPerPage( state.rowsPerPage, true );\n    this.setTotalRecords( state.totalRecords, true );\n    router.save( router.getPath() + '?page=' + state.page );\n\n  }\n  \n  function initPaginator( page, totalRecords, rowsPerPage ) {\n      \n      Y.one('#paginator').empty();\n      var paginatorConfiguration = {\n              totalRecords: totalRecords\n            , rowsPerPage: rowsPerPage\n            , initialPage : page\n            , template: '{FirstPageLink} {PageLinks} {NextPageLink}'        \n          }\n        , paginator = new Y.Paginator( paginatorConfiguration );\n\n      paginator.on( 'changeRequest', update );\n        \n      if (totalRecords > rowsPerPage) {\n        paginator.render('#paginator');\n      }\n\n  }    \n\n  function onSuccess ( response, args ) {\n      \n      try {\n          \n          var node = args.container\n            , resultsnum = Y.one('.resultsnum')\n            , page = ( args.page ) ? args.page : 1\n            , numfound = parseInt(response.response.numFound, 10)\n            , numfoundNode = resultsnum.one('.numfound')\n            , start = parseInt(response.response.start, 10)\n            , displayStart = ( start < 1 ) ? 1 : (start + 1)\n            , startNode = resultsnum.one('.start')\n            , docslengthNode = resultsnum.one('.docslength')\n            , docslength = parseInt(response.response.docs.length, 10)\n            , appRoot = Y.one('body').getAttribute('data-app')\n            , rows = args.rows\n            ;\n \n          /** re-init pagination each time, since number of results changes */\n          initPaginator( page , numfound, rows );\n\n          node.setAttribute( 'data-numFound', numfound );\n\n          node.setAttribute( 'data-start', start );\n\n          node.setAttribute( 'data-docsLength', docslength );\n          \n          startNode.set( 'innerHTML', displayStart );\n\n          docslengthNode.set( 'innerHTML', start + docslength );\n          \n          numfoundNode.set( 'innerHTML', numfound );\n\n          node.append(\n            itemsTemplate({\n              items : response.response.docs,\n              app: { appRoot : appRoot }\n            })\n          );\n          \n          args.container.setAttribute( 'data-requesterror', 0 );\n\n          Y.one('body').removeClass('io-loading');\n\n      }\n\n      catch (e) { }\n\n  }\n\n  function initRequest ( options ) {\n  \n      var start = 0\n        , page = 0\n        , sortData = Y.one('#browse-select :checked')\n        , sortBy = sortData.get('value')\n        , sortDir = sortData.getAttribute( \"data-sort-dir\" )\n        , data = options.container.getData()\n        , source = Y.one('body').getAttribute('data-source-discovery')\n        , subject_term_id = Y.one('main').getAttribute('data-tid')\n        , fl = ( data.fl ) ? data.fl : '*'\n        , rows = ( data.rows ) ? data.rows : 10\n        , fq = [];\n      \n      Y.log ( subject_term_id ) ;\n\n      Y.one('body').addClass('io-loading');\n      \n      /** find all data-fq and push the value into fq Array*/\n      for ( var prop in data ) {\n          if ( data.hasOwnProperty( prop ) ) {\n              if ( prop.match('fq-') ) {\n                fq.push( prop.replace('fq-', '') + ':' + data[prop] );\n            }\n          }\n      }\n         \n      if ( options.page ) {\n          page = parseInt( options.page, 10 );\n      }\n\n      if ( options.start ) {\n          start = parseInt( options.start, 10 );\n      }\n\n      if ( options.rows ) {\n          rows = parseInt( options.rows, 10 );\n      }\n      \n      source = source \n             + \"?\"\n             + \"wt=json\"\n             + \"&json.wrf=callback={callback}\"\n             + \"&fl=\" + fl\n             + \"&fq=\" + fq.join(\"&fq=\")\n             + \"&rows=\" + rows\n             + \"&start=\" + start\n             + \"&sort=\" + sortBy + \"%20\" + sortDir;\n\n      options.container.empty();\n\n      Y.jsonp( source, {\n          on: {\n              success: onSuccess,\n              failure: onFailure,\n              timeout: onTimeout\n          },\n          args: options,\n          timeout: 3000\n      });\n  \n  }\n  \n  router.replace( getRoute () );\n  \n});\n</script>","menus":[{"label":"Home","status":"active","route":"","page":"front","weight":0},{"label":"About","status":"active","route":"/about","page":"about","weight":1},{"label":"Series","status":"active","route":"/series","page":"series","weight":2},{"label":"Subjects","status":"active","route":"/subjects","page":"subjects","weight":3},{"label":"Browse","status":"active","route":"/browse","page":"browse","weight":4}],"appRoot":"/awdl_site","discoUrl":"http://dev-discovery.dlib.nyu.edu:8080/solr3_discovery/core0/select/","appName":"Ancient World Digital Library","appUrl":"http://localhost:8000/awdl_site","partners":[{"id":"isaw","name":"INSTITUTE FOR THE STUDY OF THE ANCIENT WORLD","logo":"images/logos/nyu_short_color.png","url":"http://isaw.nyu.edu/"},{"id":"dlts","name":"DIGITAL LIBRARY TECHNOLOGY SERVICES","logo":"images/logos/nyuad.png","url":"http://dlib.nyu.edu/"}],"css":"<link href='http://localhost:8000/awdl_site/css/style.css' rel='stylesheet' type='text/css'>"}